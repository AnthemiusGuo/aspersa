# To use, either source and execute this function against your script, and
# generate and hard-code command-line option parsing code, or embed this file as
# a function, then call the function with $0 and evaluate its output.  The list
# of command-line options must be an indented USAGE here-doc.  Options are lines
# that begin with a dash.  Options that take a value are followed by an
# uppercase WORD after the option name.  Lines with the text "one of the
# following:" begin a case-statement to specify allowed options; subsequent
# lines that contain a close-paren are allowed values.  Default values can be
# given on the same line as the option name, enclosed by the text "(default X)".
# Options are stored into exported variables named OPT_$o, where $o is the name
# of the option.  If the Options: line in the usage text ends with (required:
# -WORD), then every letter in WORD is a required option.
generate_parse_options() { # This function is copy/pasted from lib/options.  
   awk '
   BEGIN {
      required_opts="";
      print "   for o; do";
      print "      case \"${o}\" in";
      print "         --)";
      print "            shift; break;";
      print "            ;;";
      print "         --help)";
      print "            usage;";
      print "            ;;";
   }
   /^   cat <<-USAGE/,/^.USAGE/{
      if ( $1 ~ /^-/ ) {
         if ( in_case == 1 ) {
            print "               *)";
            print "                  OPT_ERR=\"Bad option value\";";
            print "                  usage";
            print "                  ;;";
            print "            esac";
            print "            ;;";
            in_case = 0;
         }
         o = substr($1, 2);
         if ( $0 ~ /\(default .*\)/ ) {
            d = substr($0, index($0, "(default") + 9);
            d = substr(d, 1, index(d, ")") - 1);
            defaults[o] = d;
         }
         else {
            defaults[o] = "";
         }
         print "         " $1 ")";
         if ( $2 ~ /^[[:upper:]]*$/ ) {
            print "            shift; OPT_" o "=\"${1}\"; shift;";
         }
         else {
            print "            shift; OPT_" o "=1;";
         }
         if ( $0 ~ /one of the following:/ ) {
            in_case = 1;
            print "            case \"${OPT_" o "}\" in";
         }
         else {
            print "            ;;";
         }
      }
      else if ( in_case == 1 && $0 ~ /\)/ ) {
         print "               " $1;
         print "                  ;;";
      }
   }
   /^Options: \(required: -/ {
      required_opts=substr($NF, 2, length($NF) - 2);
   }
   END {
      print "         -*)";
      print "            OPT_ERR=\"Unknown option ${o}.\"";
      print "            usage";
      print "            ;;";
      print "      esac";
      print "   done";
      for ( o in defaults ) {
         print "   export OPT_" o "=\"${OPT_" o ":-" defaults[o] "}\";";
      }
      i = 0;
      while ( i < length(required_opts) ) {
         o = substr(required_opts, i, 1);
         printf "   [ -z \"${OPT_%s}\" ] && OPT_ERR=\"Missing command-line option -%s\" usage\n", o, o;
         i++;
      }
   }' "${1:-$0}" # The file to read will usually be passed as $0 by caller
}
